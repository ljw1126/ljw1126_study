import java.util.Queue;

public class template {
    // start 에서 시작해서 갈 수 있는 정점들은 모두 탐색하기 
    static void bfs(int start){`
        Queue<Integer> que = new LinkedList<>();

        //start 는 방문 가능한 점이므로 que에 넣어준다 
        que.add(start);
        visit[start] = true; // start를 갈 수 있다고 표시(중요!)

        while(!que.isEmpty()){ //더 확인할 점이 없다면 정지 
            int x = que.poll(); //  ←← 모든 정점이 x로 한번씩만 등장한다 . O(V)
            //(1편 34분)여기에 방문여부 넣으면, 결과는 구해지는데 그래프가 특수한 상황에 문제가 발생가능한
            //visited[x] = true  // 같은 정점이 큐에 여러번 들어갈 수 있음(문제), 시간복잡도 / 공간복잡도 증가 

            for(int y : x에서 갈 수 있는 점들){ //  ←← 인접행렬 사용시 O(V) / 인접리스트 사용시 O(deg(x))
                if(visit[y]) continue; // x에서 y를 갈 수 있지만, 이미 탐색한 점이면 무시 

                //y를 갈 수 있으니깐 que에 추가하고 , visit 처리하기 
                // ☆☆☆☆☆ key point
                que.add(y);
                visit[y] = true;  
            }

        }
    }
}
