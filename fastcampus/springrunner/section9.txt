#9-1 계층화 
※ 엔터프라이즈 애플리케이션의 계층 
1. 프리젠테이션(Presetation)
   사용자와 S/W간 상호작용을 처리한다.(입출력)
2. 도메인(Domain)
   핵심 업무 논리를 처리하는 객체들로 구성되며 엔터프라이즈 애플리케이션에서 가장 중요한 자산이다.
3. 데이터 원본(DataSource)
   파일 또는 데이터베이스 시스템 등과 데이터 송/수신을 처리함

#9-2
- 분리된 인터페이스 패턴 (?이해안됨)
  - 내부 영역 : MovieReader, MovieFinder 
  - 외부 영역 : CsvMovieReader, JaxbMovieReader

※ S/W의 두가지 가치 
   1. 행위적 가치 : 사용자가 가진 문제를 해결해주는 것 
   2. 구조적 가치 : 변경하기 쉬운 소프트웨어를 만드는 것 
※ S/W를 구성하는 2가지 요소
   1. 정책 : 모든 업무 규칙과 업무 절차를 구체화 한 것 
   2. 구현 세부사항 : 입출력 장치, 데이터베이스 등 시스템을 사용 또는 구동하는데 필요한 것 
  
#9-3 스프링의 본질과 개발자의 역할(중요☆☆☆☆☆☆☆☆☆☆)
- 많은 사람들이 객체 지향 프로그래밍을 클래스안에 속성과 메소드를 채워 넣는 작업이나 
  상속을 이용해 코드를 재사용하는 방법 정도로 생각함 (프로그래밍 관점에서는 중요)
- 다만 너무 프로그래밍 관점에 치우쳐서 객체 지향을 바라볼 경우 
  객체 지향의 본질을 놓치기 쉽다.
- 이 객체 지향에서 가장 중요한 것은 
  애플리케이션의 기능을 구현하기 위해 협력에 참여하는 객체들 사이의 상호 작용임 
  객체들은 협력에 참여하기 위해 역할을 부여 받고 역할에 적합한 책임을 수행함 
  스프링은 어떻게 객체가 설계되고, 만들어지고, 어떻게 관계를 맺고 사용되는지에 관심을 두는 프레임워크 입니다. 
  스프링의 관심은 객체와 그 관계이다.
  하지만 객체를 어떻게 설계하고, 분리하고, 개선하고, 어떤 의존 관계를 가질지 결정하는 일은 스프링이 아니라 
  개발자의 역할이며 책임입니다. 스프링은 단지 원칙을 잘 따르는 설계를 적용하고자 할 때 
  필연적으로 등장하는 번거로운 작업을 편하게 할 수 있도록 도와주는 도구일 뿐임을 잊지 말자.

