#20-1 모듈화 ( 강의 다시 보기 )
- 소프트웨어의 전체적인 구조를 표현하기 위해 관련된 클래스의 집합을 
  하나의 논리적인 단위로 묶는 구성 요소를 모듈이라고 부르며, 이를 자바에서는 패키지로 표현함 
- 관심사가 같은 코드를 한곳에 모으는 것은 소프트웨어 개발의 가장 기본이자 원칙임 
- 그렇게 관심사가 같은 코드를 모아 응집시키고, 관심사가 다른 코드는 소프트웨어 설계 원칙에 따라 분리하고, 
  서로 낮은 결합도를 가진 채로 독립적이고 유연하게 확장할 수 있는 모듈로 만드는 것이 지금까지 해온 작업이다.
- 계층화란?
  복잡한 소프트웨어를 계층으로 나눔으로써 관심사를 분리하는 애플리케이션 아키텍처 패턴임

1. 수직적 관심사에 따른 모듈 
   비즈니스와 응용 프로그램에 특화된 기능 ( 재사용성 보다는 메인 로직 중요) 
2. 수평적 관심사에 따른 모듈 
   로깅, 보안 등 공통적인 저수준 기능 (범용적 재사용성이 매우 중요)

- 즉 , 모듈화는 커다란 단일 코드 베이스를 더 작은 캡슐화된 기능 단위로 나누고, 나눠진 작은 단위가 서로 협력하여 
  더 큰 단위로 동작하게 하는 것을 말함. 
  모듈은 자신을 사용하기 위한 API를 외부에 제공해야 하고 자신이 구동되는데 필요한 환경을 명확히 나열할 수 있어야 함 
  또한 독립적으로 테스트될 수 있어야 하고, 다른 모듈에 대한 의존성도 최소한으로 가지는 것이 좋음 

- 스프링 트랜잭션 서비스 추상화와 선언적 트랜잭션 처리 흐름 ( 강의 영상 참고 )
  >  @Transactional 설명과 트랜잭션 관련 Bean 등록 방법 설명함 


#20-2 애노테이션 기반 캐시 속성 부여하기 
- 스프링의 캐시 추상화 특정 캐시 라이브러리에 종속되지 않도록 추상화된 캐시 API인 캐시 매니저와 캐시를 제공하고 있음 
- 지금까지 방법외에도 선언적으로 캐싱할 수 있는 방법도 제공하고 있음 (공식문서 참고 8.2. Declarative Annotation-based Caching) 
  https://docs.spring.io/spring-framework/docs/5.3.8/reference/html/integration.html#cache-annotations
  > @EnableCaching 통해 간단히 활성화시키고 사용가능 (속성 제어 가능)
  >> MovieBuddyFactory 수정하고 MovieFinderTest 실행 
  >> MovieBuddyFactory implements CachingConfigurer 해서 오버라이딩해서 구현 

- *스프링은 다양한 빈 설정용 애노테이션을 제공하고 있고, 이런 빈 설정용 애노테이션에는 항상 빈설정자가 제공됨 
   ex) @EnableAsync -> AsyncConfigurer , @EnableScheduling -> SchedulingConfigurer 