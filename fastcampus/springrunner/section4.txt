# 4-1 
- MovieFinder class 에서 현재 Csv만 읽을 수 있는데 Xml 읽도록 동적으로 변경하는게 가능할 것인가?
  private MovieReader movieReader = new CsvMovieReader();
- No. MovieFinder 내부에서 xml , csv 읽을 지 결정할게 아니라 외부에서 결정하도록 해야함!!
  -그래서 내부에서 직접생성하지 않고, 생성자를 통해 주입받아 사용하도록 한다!! 
   1) MovieFinder 생성자 통해 xml, csv 객체 주입받을 수 있도록함 
   2) MovieBuddyApplication 수정함 ( 일단은 new CsvMovieReader() 생성자 넘기도록)

# 4-2
- 객체를 생성하고, 생성한 객체를 반환하는 것을 보편적으로 "factory"라고 함 
  - 객체를 생성하는 쪽과, 사용하는 쪽의 역할과 책임을 분리하는 역할로 사용함(MovieBuddyFactory 클래스 생성)

# 4-3
MovieFinderTest 클래스를 junit 테스트로 변경 

# 4-4 (제어의 역전, 프로그램의 제어 흐름 구조가 뒤 바뀌는 것)
- MovieFinder는 factory 통해서 생성자 주입받음  
  - 객체가 자신이 사용할 객체를 스스로 생성하지 않음 , 생성주기, 사용때 등을 알 수 없음 
    => 제어권한을 자신이 아닌 다른 대상에게 위임 했기 때문 

※ 제어의 역전(Inversion of Control, IoC)
   1. 제어의 역전이란 '프로그램 제어 흐름 구조가 뒤바뀌는 것'으로 프레임워크나 서블릿 컨테이너 등에 적용된 개념 
   2. 제어의 역전 개념을 적용하면 '설계가 깨끗해지고 유연성이 증가하며 확장성이 좋아짐'
   3. 특정 기술이나 환경에 종속되지 않은 보편적으로 사용되는 프로그래밍 모델임
   4. Spring은 제어의 역전을 '모든 기능의 기초가 되는 기반 기술'로 삼고, 극한으로 활용한다.

# 4-5 S/W의 설계 원칙과 디자인 패턴  // 개념 강의
- Solid 원칙 : 깔끔한 설계를 위해 적용가능한 5가지 S/W 설계 원칙이다.
  1. OCP(개방폐쇄 원칙) : S/W 개체는 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다. (MovieFinder)
  2. DIP(의존성 역전 원칙) : 상위 정책은 하위 정책에 의존하면 안된다. 하위 정책이 상위 정책에 정의된 추상 타입에 의존해야 한다.
     - 관심사의 분리와 높은 응집도, 낮은 결합도 (ppt 참고)
     - 디자인 패턴(Design Pattern) 
       - 소프트웨어 개발 과정에서 발견된 설계의 노하우를 정리하여 이름을 붙인 것이다. 
       - 자주 발생하는 문제에 대해 검증된 해결책을 제시한다. 
         ※ MovieFinder와 MovieReader의 경우 '전략 패턴'이라 함
         ※ Template Method 패턴 , MovieReader에서 loadMovies를 구현화하도록 함  

# 4-6 의존관계와 의존관계 주입(Dependency Injection, DI)
※ MovieFinder는 인터페이스 구현/실제화된 클래스(Csv,Jaxb리더)에 의존하지 않고 MovieReader에 의존하고 있음
   => 코드/실행 시점의 의존 관계가 다를 수 있다.
   => 다형성? 객체 지향 프로그램의 코드 시점의 의존관계와 실행 시점의 의존 관계가 다를 수 있다는 사실을 기반으로 함
        - 코드 시점에서 MovieFinder는 MovieReader로 향함
        - 실행 시점에서는 MovieFinder에서 CsvMovieReader나 JaxbMovieReader로 향함
- 객체 지향 설계의 핵심은 협력을 위해 필요한 의존은 유지하면서, 변경을 방해하는 의존 관계는 제거하는데 있음 
- 이런 관점에서 객체 지향 설계란 의존 관계를 관리하는 것이고,  객체가 변경을 받아 들일 수 있게 의존관계를 정리하는 기술이라 할 수 있음
- 의존관계 주입이란?
  > 외부의 다른 객체(factory)가 MovieFinder에게 MovieReader를 구현체/객체를 생성해 전달해야 한다는 것을 의미함 
  > 외부(factory)에서 객체를 생성해서 이를 사용하는 객체(MovieFinder)로 전달/주입하는 것 
  
※ 의존관계 주입방법 
 1. 생성자 주입* - 객체를 생성하는 시점에 생성자를 통한 의존관계를 주입한다.
 2. 설정자 주입* - 객체를 생성 후 설정자(setter) 메서드를 통한 의존관계를 주입한다.
 3. 메소드 주입 - 메서드 실행 시 인자를 이용한 의존관계를 주입한다. 



