# 관심사의 분리와 계층화 
* MovieBuddyApplication의 두 가지 관심사 
	1. 사용자 명령을 입력 받아 비즈니스 로직을 실행하고, 결과 출력한다
	2. CSV 파일로 작성된 영화 메타데이터를 읽어들인 후 조건에 맞는 영화를 검색한다.
	>> 하나의 관심사를 수정할 경우 다른 관심사에도 영향 받을 수 밖에 없음 

※ s/w 에서 domain 이란 ?
   s/w로 해결하고자 하는 영역을 domain이라 함 

# 소프트웨어 개발시 지켜야 할 두가지 요건 
우리는 '오늘 완성해야 하는 기능을 구현하는 코드'를 짜야하는 동시에 
'내일 쉽게 변경할 수 있는 코드'를 짜야한다.

* MovieFinder의 두가지 관심사 
	1. csv 파일로 작성된 '영화 메타데이터를 읽어들인다'.
	2. '조건에 맞는 영화를 검색'한다

- 상속과 다형성 => 두개념의 기저에는 추상화라고 하는 원리가 숨겨져 있음 
	- 추상화 : 어떤 것들의 공통적인 성격을 뽑아내서 이를 따로 분리해내는 작업을 의미 

※ [window > prefrence > (filter에) keys 검색 > new 검색] 하면 새 파일 단축키가 ctrl + N 으로 되어 있는거 확인가능

* 작업 
	- MovieFinder를 추상클래스로 변경, loadMovies()도 추상메소드로 변경 // 기존 loadMovies()는 주석 똔ㄴ 잘라내기
	- test 진행 , console에 아무것도 안뜨면 정상동작 // 이때 어떤 클래스는 에러가 뜨는데 무시 

[정리]
- 상속은 코드를 재사용 가능함 
- MovieFinder 클래스는 그대로 두고 상속을 통해 새로운 메타데이터를 읽을 수 있게 변경하여 
  이제는 얼마든지 확장을 할 수 있음 
- 이처럼 부모 클래스의 기본적인 알고리즘의 흐름을 구현하고 , 중간에 필요한 처리를 자식 클래스에게 위임하는 구조를 
  디자인 패턴에서는 '탬플릿 메소드 패턴(spring에서 자주 사용되는 패턴)'이라고 합니다.
- 지금까지 우리는 관심사에 따라 '영화 메타데이터를 읽는 것'과 '영화를 검색하는 것'이라는 2개의 관심을 상하위 클래스로 변경 
  > 변화의 성격이 다름 = 변화의 이유와 시기가 다름 
  > MovieFinder는 영화목록을 조건에 따라 필터링하는 관심사를 모아둔 곳이고 
     따라서 이런 관심사가 바뀌면 그때 변경이 일어남.
    즉 영화감독이나 연도가 아니라 영화 장르나 언어로 검색하겠다고 하는 요구사항 또는 이런 식의 관심사가 
    변경될때 MovieFinder가 변경됨 
  > 메타 데이터 읽는게 변경된다고 MovieFinder가 변경되지 않음 
  > 상하위 클래스로 분리하고 상속으로 구현된 하위 클래스에서 변화가 필요한 부분을 바꿔 쓸 수 있게 만든 이유는 
     바로 변화의 성격이 다른걸 분리해서 서로 영향을 주지 않은채 각각 필요시점에 독립적으로 변경하기 위해서 

 ===============================
 # 합성을 통해 다양한 메타데이터를 읽을 수 있도록 추상화 하기 
    - 코드의 재사용성을 높이는 데 상속을 사용하지만, 무분별한 상속은 코드를 어지럽힐 수 있다.
       - 그래서 상속보다는 합성을 먼저 고려하는 것이 좋다 
       - 추상 클래스보다는 인터페이스를 우선하라 
       - 객체는 인터페이스를 사용해 참조하라.*
          => 인터페이스는 자바가 추상화를 위해 제공하는 유용한 도구 
               정의된 메시지 통해서만 재사용 가능하기때문에 구현을 효과적으로 캡슐화 할 수 있으며, 
               참조되는 인스턴스를 교체하는 것이 비교적 쉬워 설계를 유연하게 만들어줌 ! 
    - 합성은 "다른 객체의 인스턴스를 자신의 인스턴스 변수로 포함해서 재사용하는 방법을 말함"
    [수행 - section 2-2 에 2:21 참조]
    - abstract class MovieFinder 추상클래스를 다시 일반클래스로 변경
    - MovieReader라는 interface 생성하고 CsvMovieReader 와 XmlMovieReader에서 해당 인터페이스의 loadMovies를 구현/실체화함  



